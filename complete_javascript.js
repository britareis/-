// –ò–≥—Ä–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let gameState = {
  day: 1,
  money: 2150,
  xp: 0,
  energy: 80,
  health: 100,
  hunger: 30,
  burnout: 15,
  relationshipLevel: 0,
  hasPartner: false,
  partnerName: '',
  ownedItems: [],
  clients: [],
  activeTab: 'housing'
};

// –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤
const clientTypes = [
  {
    name: '–ù–∞—á–∏–Ω–∞—é—â–∏–π –±–ª–æ–≥–µ—Ä',
    emojis: ['üì±', 'ü§≥', 'üíÑ'],
    budget: [500, 2000],
    difficulty: 1,
    descriptions: [
      '–•–æ—á–µ—Ç —Å–Ω—è—Ç—å –ø–µ—Ä–≤–æ–µ –≤–∏–¥–µ–æ –¥–ª—è TikTok',
      '–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å –º–æ–Ω—Ç–∞–∂–æ–º –¥–ª—è YouTube',
      '–ú–µ—á—Ç–∞–µ—Ç —Å—Ç–∞—Ç—å –∏–Ω—Ñ–ª—é–µ–Ω—Å–µ—Ä–æ–º'
    ]
  },
  {
    name: '–°–≤–∞–¥–µ–±–Ω–∞—è –ø–∞—Ä–∞',
    emojis: ['üíí', 'üë∞', 'ü§µ'],
    budget: [5000, 25000],
    difficulty: 2,
    descriptions: [
      '–ü–ª–∞–Ω–∏—Ä—É—é—Ç —Å–≤–∞–¥—å–±—É –º–µ—á—Ç—ã',
      '–ù—É–∂–µ–Ω –≤–∏–¥–µ–æ–≥—Ä–∞—Ñ –Ω–∞ —Ç–æ—Ä–∂–µ—Å—Ç–≤–æ',
      '–•–æ—Ç—è—Ç —Å–æ–∑–¥–∞—Ç—å –∫—Ä–∞—Å–∏–≤—ã–π —Ñ–∏–ª—å–º'
    ]
  },
  {
    name: '–ú–µ—Å—Ç–Ω—ã–π –±–∏–∑–Ω–µ—Å',
    emojis: ['üè™', 'üçï', '‚úÇÔ∏è'],
    budget: [3000, 15000],
    difficulty: 2,
    descriptions: [
      '–ù—É–∂–Ω–∞ —Ä–µ–∫–ª–∞–º–∞ –¥–ª—è —Å–∞–ª–æ–Ω–∞ –∫—Ä–∞—Å–æ—Ç—ã',
      '–•–æ—Ç—è—Ç —Å–Ω—è—Ç—å —Ä–æ–ª–∏–∫ –æ –ø–∏—Ü—Ü–µ—Ä–∏–∏',
      '–ü—Ä–æ–¥–≤–∏–≥–∞—é—Ç –Ω–æ–≤—ã–π –º–∞–≥–∞–∑–∏–Ω'
    ]
  },
  {
    name: '–ú—É–∑—ã–∫–∞–Ω—Ç',
    emojis: ['üé∏', 'üé§', 'üéµ'],
    budget: [2000, 10000],
    difficulty: 3,
    descriptions: [
      '–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ø–µ—Ä–≤—ã–π –∫–ª–∏–ø',
      '–ù—É–∂–µ–Ω –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –≤–∏–¥–µ–æ—Ä—è–¥',
      '–ú–µ—á—Ç–∞–µ—Ç –æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏'
    ]
  }
];

// –¢–µ–∫—Å—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
const statusTexts = {
  burnout: {
    0: '–ü–æ–ª–æ–Ω —ç–Ω—Ç—É–∑–∏–∞–∑–º–∞ –∏ –∏–¥–µ–π!',
    20: '–ù–∞—á–∏–Ω–∞–µ—à—å –ø–æ–Ω–∏–º–∞—Ç—å, —á—Ç–æ –≤—Å—ë –Ω–µ —Ç–∞–∫ –ø—Ä–æ—Å—Ç–æ...',
    40: '–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –æ—Ç–∫–∞–∑—ã –Ω–∞—á–∏–Ω–∞—é—Ç –¥–∞–≤–∏—Ç—å',
    60: '–•–æ—á–µ—Ç—Å—è –≤—Å—ë –±—Ä–æ—Å–∏—Ç—å –∏ —É–µ—Ö–∞—Ç—å –∫ –±–∞–±—É—à–∫–µ –≤ –¥–µ—Ä–µ–≤–Ω—é',
    80: '–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –∫–∞–∫ –ø—ã—Ç–∫–∞. –ó–∞—á–µ–º —è –≤—ã–±—Ä–∞–ª —ç—Ç—É –ø—Ä–æ—Ñ–µ—Å—Å–∏—é?',
    100: '–ü–æ–ª–Ω–æ–µ –≤—ã–≥–æ—Ä–∞–Ω–∏–µ. –ù–∏—á–µ–≥–æ –Ω–µ —Ö–æ—á–µ—Ç—Å—è –¥–µ–ª–∞—Ç—å'
  },
  hunger: {
    0: '–°—ã—Ç –∏ –¥–æ–≤–æ–ª–µ–Ω –∂–∏–∑–Ω—å—é',
    20: '–õ—ë–≥–∫–∏–π –≥–æ–ª–æ–¥, –Ω–æ –ø–æ–∫–∞ —Ç–µ—Ä–ø–∏–º–æ',
    40: '–ñ–µ–ª—É–¥–æ–∫ —Ç—Ä–µ–±—É–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π –µ–¥—ã',
    60: '–û–ø—è—Ç—å –¥–æ—à–∏–∫... –ö–æ–≥–¥–∞ —ç—Ç–æ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è?',
    80: '–ú–µ—á—Ç–∞–µ—à—å –æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º –æ–±–µ–¥–µ',
    100: '–ì–æ—Ç–æ–≤ –ø—Ä–æ–¥–∞—Ç—å –¥—É—à—É –∑–∞ –±–æ—Ä—â —Å –º—è—Å–æ–º'
  },
  energy: {
    0: '–°–∏–ª—ã –Ω–∞ –∏—Å—Ö–æ–¥–µ, –Ω—É–∂–µ–Ω –æ—Ç–¥—ã—Ö',
    20: '–ï–ª–µ –¥–µ—Ä–∂–∏—à—å—Å—è –Ω–∞ –Ω–æ–≥–∞—Ö',
    40: '–£—Å—Ç–∞–ª–æ—Å—Ç—å –Ω–∞–∫–∞–ø–ª–∏–≤–∞–µ—Ç—Å—è',
    60: '–ï—â—ë –º–æ–∂–µ—à—å —Ä–∞–±–æ—Ç–∞—Ç—å, –Ω–æ –Ω–µ –¥–æ–ª–≥–æ',
    80: '–ß—É–≤—Å—Ç–≤—É–µ—à—å —Å–µ–±—è –±–æ–¥—Ä–æ',
    100: '–ì–æ—Ç–æ–≤ —Å–≤–µ—Ä–Ω—É—Ç—å –≥–æ—Ä—ã!'
  },
  health: {
    0: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –Ω—É–∂–µ–Ω –≤—Ä–∞—á!',
    20: '–ó–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä—å—ë–∑–Ω–æ –ø–æ—à–∞—Ç–Ω—É–ª–æ—Å—å',
    40: '–ß–∞—Å—Ç—ã–µ –Ω–µ–¥–æ–º–æ–≥–∞–Ω–∏—è –±–µ—Å–ø–æ–∫–æ—è—Ç',
    60: '–ò–Ω–æ–≥–¥–∞ –±–æ–ª–∏—Ç –≥–æ–ª–æ–≤–∞, –Ω–æ –≤ —Ü–µ–ª–æ–º –Ω–æ—Ä–º–∞',
    80: '–ß—É–≤—Å—Ç–≤—É–µ—à—å —Å–µ–±—è —Ö–æ—Ä–æ—à–æ',
    100: '–ó–¥–æ—Ä–æ–≤ –∫–∞–∫ –±—ã–∫!'
  },
  money: {
    low: '–ù–∞ –∫–∞—Ä—Ç–µ –∫–æ–ø–µ–π–∫–∏, –Ω–∞–¥–æ —á—Ç–æ-—Ç–æ –¥–µ–ª–∞—Ç—å...',
    medium: '–•–≤–∞—Ç–∞–µ—Ç –Ω–∞ —Å–∞–º–æ–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ',
    high: '–ú–æ–∂–µ—à—å –ø–æ–∑–≤–æ–ª–∏—Ç—å —Å–µ–±–µ –Ω–µ–±–æ–ª—å—à–∏–µ —Ä–∞–¥–æ—Å—Ç–∏',
    rich: '–î–µ–Ω—å–≥–∏ –µ—Å—Ç—å, –º–æ–∂–Ω–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –±—É–¥—É—â–µ–µ'
  }
};

// –ü—Ä–µ–¥–º–µ—Ç—ã –≤ –º–∞–≥–∞–∑–∏–Ω–µ
const storeItems = {
  // –ñ–∏–ª—å—ë
  room: { name: '–ö–æ–º–Ω–∞—Ç–∞ –≤ –æ–±—â–∞–≥–µ', price: 20000, category: 'housing', effects: { energy: 10, burnout: -5 } },
  studio: { name: '–°—Ç—É–¥–∏—è –Ω–∞ –æ–∫—Ä–∞–∏–Ω–µ', price: 45000, category: 'housing', effects: { energy: 20, burnout: -10, health: 5 } },
  apartment: { name: '–û–¥–Ω—É—à–∫–∞ –≤ —Å–ø–∞–ª—å–Ω–æ–º —Ä–∞–π–æ–Ω–µ', price: 80000, category: 'housing', effects: { energy: 30, burnout: -15, health: 10 } },
  penthouse: { name: '–ü–µ–Ω—Ç—Ö–∞—É—Å –≤ —Ü–µ–Ω—Ç—Ä–µ', price: 500000, category: 'housing', effects: { energy: 50, burnout: -25, health: 20 } },
  
  // –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç
  bicycle: { name: '–í–µ–ª–æ—Å–∏–ø–µ–¥', price: 15000, category: 'transport', effects: { health: 10, energy: 5 } },
  scooter: { name: '–°–∫—É—Ç–µ—Ä', price: 35000, category: 'transport', effects: { energy: 10 } },
  car: { name: '–ü–æ–¥–µ—Ä–∂–∞–Ω–Ω–∞—è –º–∞—à–∏–Ω–∞', price: 150000, category: 'transport', effects: { energy: 15, burnout: -5 } },
  newCar: { name: '–ù–æ–≤–∞—è –º–∞—à–∏–Ω–∞', price: 800000, category: 'transport', effects: { energy: 25, burnout: -10, health: 5 } },
  
  // –¢–µ—Ö–Ω–∏–∫–∞
  phone: { name: '–ù–æ—Ä–º–∞–ª—å–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω', price: 25000, category: 'tech', effects: { xp: 5 } },
  laptop: { name: '–ù–æ—É—Ç–±—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã', price: 60000, category: 'tech', effects: { xp: 15, energy: 5 } },
  camera: { name: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –∫–∞–º–µ—Ä–∞', price: 120000, category: 'tech', effects: { xp: 25, money: 100 } },
  studio_eq: { name: '–°—Ç—É–¥–∏–π–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ', price: 300000, category: 'tech', effects: { xp: 50, money: 300 } }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
function initGame() {
  console.log('–ò–≥—Ä–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è...');
  updateDisplay();
  generateRandomClient();
  
  // –ó–∞–ø—É—Å–∫ –∏–≥—Ä–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞
  setInterval(gameLoop, 30000); // –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
  console.log('–ò–≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞!');
}

// –û—Å–Ω–æ–≤–Ω–æ–π –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
function gameLoop() {
  // –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
  gameState.hunger = Math.min(100, gameState.hunger + Math.random() * 5);
  gameState.energy = Math.max(0, gameState.energy - Math.random() * 3);
  
  // –°–ª—É—á–∞–π–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
  if (Math.random() < 0.1) {
    triggerRandomEvent();
  }
  
  updateDisplay();
  checkCriticalStates();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
function updateDisplay() {
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
  document.getElementById('day-counter').textContent = gameState.day;
  document.getElementById('money').textContent = gameState.money.toLocaleString() + '‚ÇΩ';
  document.getElementById('xp').textContent = gameState.xp;
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–æ—Å–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  updateStatBar('burnout', gameState.burnout);
  updateStatBar('hunger', gameState.hunger);
  updateStatBar('energy', gameState.energy);
  updateStatBar('health', gameState.health);
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
  updateStatusTexts();
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–Ω–æ—à–µ–Ω–∏–π
  updateRelationshipStatus();
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–≥–∞–∑–∏–Ω
  updateStoreItems();
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–æ—Å–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
function updateStatBar(stat, value) {
  const bar = document.getElementById(stat + '-bar');
  if (bar) {
    bar.style.width = value + '%';
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤ —Å–æ—Å—Ç–æ—è–Ω–∏–π
function updateStatusTexts() {
  const burnoutText = getStatusText('burnout', gameState.burnout);
  const hungerText = getStatusText('hunger', gameState.hunger);
  const energyText = getStatusText('energy', gameState.energy);
  const healthText = getStatusText('health', gameState.health);
  
  document.getElementById('burnout-text').textContent = burnoutText;
  document.getElementById('hunger-text').textContent = hungerText;
  document.getElementById('energy-text').textContent = energyText;
  document.getElementById('health-text').textContent = healthText;
  
  // XP —Ç–µ–∫—Å—Ç
  const xpTexts = [
    '–ö–∞–∂–¥—ã–π –æ—Ç–∫–∞–∑ ‚Äî —ç—Ç–æ –æ–ø—ã—Ç',
    '–ù–∞—á–∏–Ω–∞–µ—à—å –ø–æ–Ω–∏–º–∞—Ç—å –∏–Ω–¥—É—Å—Ç—Ä–∏—é',
    '–ü–æ—è–≤–ª—è—é—Ç—Å—è –ø–µ—Ä–≤—ã–µ –Ω–∞–≤—ã–∫–∏',
    '–ß—É–≤—Å—Ç–≤—É–µ—à—å —Å–µ–±—è —É–≤–µ—Ä–µ–Ω–Ω–µ–µ',
    '–£–∂–µ –Ω–µ –Ω–æ–≤–∏—á–æ–∫ –≤ –¥–µ–ª–µ',
    '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª —Å–≤–æ–µ–≥–æ –¥–µ–ª–∞'
  ];
  const xpIndex = Math.min(Math.floor(gameState.xp / 20), xpTexts.length - 1);
  document.getElementById('xp-text').textContent = xpTexts[xpIndex];
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞
function getStatusText(type, value) {
  const texts = statusTexts[type];
  const keys = Object.keys(texts).map(Number).sort((a, b) => a - b);
  
  for (let i = keys.length - 1; i >= 0; i--) {
    if (value >= keys[i]) {
      return texts[keys[i]];
    }
  }
  return texts[keys[0]];
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–Ω–æ—à–µ–Ω–∏–π
function updateRelationshipStatus() {
  const relationshipStatus = document.getElementById('relationship-status');
  if (gameState.hasPartner) {
    relationshipStatus.style.display = 'block';
    document.getElementById('relationship-text').textContent = `–° ${gameState.partnerName}`;
    document.getElementById('relationship-meter').style.display = 'block';
    document.getElementById('relationship-bar').style.width = gameState.relationshipLevel + '%';
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–µ
function updateStoreItems() {
  const storeItems = document.querySelectorAll('.store-item');
  storeItems.forEach(item => {
    const itemId = item.getAttribute('data-item');
    if (gameState.ownedItems.includes(itemId)) {
      if (!item.querySelector('.owned-indicator')) {
        const indicator = document.createElement('div');
        indicator.className = 'owned-indicator';
        indicator.textContent = '–ö—É–ø–ª–µ–Ω–æ';
        item.appendChild(indicator);
      }
      const button = item.querySelector('.btn');
      button.disabled = true;
      button.textContent = '–£–∂–µ –µ—Å—Ç—å';
      button.classList.add('btn-disabled');
    }
  });
}

// –ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤
function searchClient() {
  if (gameState.energy < 10) {
    showNotification('–°–ª–∏—à–∫–æ–º —É—Å—Ç–∞–ª –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤', 'error');
    return;
  }
  
  gameState.energy -= 10;
  gameState.burnout += 5;
  
  if (Math.random() < 0.3) {
    generateRandomClient();
    showNotification('–ù–∞—à—ë–ª –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞!', 'success');
  } else {
    showNotification('–ù–∏–∫—Ç–æ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç... –ú–æ–∂–µ—Ç, –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑?', 'error');
  }
  
  updateDisplay();
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
function generateRandomClient() {
  const clientType = clientTypes[Math.floor(Math.random() * clientTypes.length)];
  const budget = Math.floor(Math.random() * (clientType.budget[1] - clientType.budget[0]) + clientType.budget[0]);
  const emoji = clientType.emojis[Math.floor(Math.random() * clientType.emojis.length)];
  const description = clientType.descriptions[Math.floor(Math.random() * clientType.descriptions.length)];
  
  const client = {
    id: Date.now(),
    name: clientType.name,
    emoji: emoji,
    description: description,
    budget: budget,
    difficulty: clientType.difficulty
  };
  
  gameState.clients.push(client);
  displayClients();
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤
function displayClients() {
  const clientsContainer = document.getElementById('clients');
  clientsContainer.innerHTML = '';
  
  gameState.clients.forEach(client => {
    const clientCard = document.createElement('div');
    clientCard.className = 'client-card';
    clientCard.innerHTML = `
      <div class="client-header">${client.emoji} ${client.name}</div>
      <div class="client-stats">
        <div class="client-stat">–ë—é–¥–∂–µ—Ç: <strong>${client.budget.toLocaleString()}‚ÇΩ</strong></div>
        <div class="client-stat">–°–ª–æ–∂–Ω–æ—Å—Ç—å: <strong>${'‚≠ê'.repeat(client.difficulty)}</strong></div>
      </div>
      <div style="color: #aaa; margin-bottom: 1rem;">${client.description}</div>
      <button class="btn" onclick="takeProject(${client.id})">–í–∑—è—Ç—å—Å—è –∑–∞ –ø—Ä–æ–µ–∫—Ç</button>
    `;
    clientsContainer.appendChild(clientCard);
  });
}

// –í–∑—è—Ç—å—Å—è –∑–∞ –ø—Ä–æ–µ–∫—Ç
function takeProject(clientId) {
  const client = gameState.clients.find(c => c.id === clientId);
  if (!client) return;
  
  if (gameState.energy < 20) {
    showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã', 'error');
    return;
  }
  
  gameState.energy -= 20;
  gameState.burnout += client.difficulty * 5;
  
  // –†–∞—Å—á—ë—Ç —É—Å–ø–µ—Ö–∞ –ø—Ä–æ–µ–∫—Ç–∞
  const successChance = Math.max(0.1, (gameState.xp / 100) + (gameState.energy / 100) - (gameState.burnout / 100));
  const success = Math.random() < successChance;
  
  if (success) {
    gameState.money += client.budget;
    gameState.xp += client.difficulty * 10;
    showNotification(`–ü—Ä–æ–µ–∫—Ç –∑–∞–≤–µ—Ä—à—ë–Ω! –ü–æ–ª—É—á–µ–Ω–æ ${client.budget.toLocaleString()}‚ÇΩ`, 'success');
  } else {
    gameState.xp += client.difficulty * 2;
    showNotification('–ü—Ä–æ–µ–∫—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω... –ù–æ –æ–ø—ã—Ç –ø–æ–ª—É—á–µ–Ω', 'error');
  }
  
  // –£–¥–∞–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞
  gameState.clients = gameState.clients.filter(c => c.id !== clientId);
  displayClients();
  updateDisplay();
}

// –î–æ—Å—Ç–∞–≤–∫–∞ –µ–¥—ã
function doDelivery() {
  if (gameState.energy < 15) {
    showNotification('–°–ª–∏—à–∫–æ–º —É—Å—Ç–∞–ª –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏', 'error');
    return;
  }
  
  gameState.energy -= 15;
  gameState.health -= 2;
  const earnings = Math.floor(Math.random() * 800) + 400;
  gameState.money += earnings;
  
  showNotification(`–û—Ç—Ä–∞–±–æ—Ç–∞–ª —Å–º–µ–Ω—É. –ó–∞—Ä–∞–±–æ—Ç–∞–ª ${earnings}‚ÇΩ`, 'success');
  updateDisplay();
}

// –ü–æ–∏—Å–∫ –ª—é–±–≤–∏
function findLove() {
  if (gameState.hasPartner) {
    // –†–∞–∑–≤–∏—Ç–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–π
    gameState.relationshipLevel = Math.min(100, gameState.relationshipLevel + 10);
    gameState.energy += 5;
    gameState.burnout -= 3;
    showNotification(`–ü—Ä–æ–≤—ë–ª –≤—Ä–µ–º—è —Å ${gameState.partnerName}. –û—Ç–Ω–æ—à–µ–Ω–∏—è –∫—Ä–µ–ø–Ω—É—Ç!`, 'success');
  } else {
    if (Math.random() < 0.2) {
      const names = ['–ê–Ω–Ω–∞', '–ú–∞—Ä–∏—è', '–ï–ª–µ–Ω–∞', '–î–∞—Ä—å—è', '–ê–ª–µ–∫—Å–µ–π', '–î–º–∏—Ç—Ä–∏–π', '–ò–≤–∞–Ω', '–ù–∏–∫–∏—Ç–∞'];
      gameState.partnerName = names[Math.floor(Math.random() * names.length)];
      gameState.hasPartner = true;
      gameState.relationshipLevel = 10;
      showNotification(`–ü–æ–∑–Ω–∞–∫–æ–º–∏–ª—Å—è —Å ${gameState.partnerName}!`, 'success');
    } else {
      showNotification('–ù–∏–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ –Ω–µ –≤—Å—Ç—Ä–µ—Ç–∏–ª...', 'error');
    }
  }
  updateDisplay();
}

// –û—Ç–¥—ã—Ö
function restAndRecover() {
  gameState.energy = Math.min(100, gameState.energy + 30);
  gameState.burnout = Math.max(0, gameState.burnout - 15);
  gameState.hunger += 10;
  
  showNotification('–•–æ—Ä–æ—à–æ –æ—Ç–¥–æ—Ö–Ω—É–ª –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª —Å–∏–ª—ã', 'success');
  updateDisplay();
}

// –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –µ–¥—ã
function showFoodMenu() {
  const foods = [
    { name: '–î–æ—à–∏–∫', price: 50, hunger: -20, health: -1 },
    { name: '–ë—É—Ä–≥–µ—Ä', price: 200, hunger: -40, health: -2 },
    { name: '–î–æ–º–∞—à–Ω—è—è –µ–¥–∞', price: 400, hunger: -60, health: 5 },
    { name: '–†–µ—Å—Ç–æ—Ä–∞–Ω', price: 1500, hunger: -80, health: 10, energy: 5 }
  ];
  
  let menuText = '–ß—Ç–æ –±—É–¥–µ—à—å –µ—Å—Ç—å?\n\n';
  foods.forEach((food, index) => {
    menuText += `${index + 1}. ${food.name} - ${food.price}‚ÇΩ\n`;
  });
  
  const choice = prompt(menuText + '\n–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä (1-4):');
  const foodIndex = parseInt(choice) - 1;
  
  if (foodIndex >= 0 && foodIndex < foods.length) {
    const food = foods[foodIndex];
    if (gameState.money >= food.price) {
      gameState.money -= food.price;
      gameState.hunger = Math.max(0, gameState.hunger + food.hunger);
      gameState.health += food.health || 0;
      gameState.energy += food.energy || 0;
      
      showNotification(`–ü–æ–µ–ª ${food.name}. –ü–æ—Ç—Ä–∞—Ç–∏–ª ${food.price}‚ÇΩ`, 'success');
      updateDisplay();
    } else {
      showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥!', 'error');
    }
  }
}

// –°–ø–æ—Ä—Ç
function workout() {
  if (gameState.energy < 10) {
    showNotification('–°–ª–∏—à–∫–æ–º —É—Å—Ç–∞–ª –¥–ª—è —Å–ø–æ—Ä—Ç–∞', 'error');
    return;
  }
  
  gameState.energy -= 10;
  gameState.health += 5;
  gameState.hunger += 10;
  gameState.burnout -= 5;
  
  showNotification('–•–æ—Ä–æ—à–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞! –ó–¥–æ—Ä–æ–≤—å–µ —É–ª—É—á—à–∏–ª–æ—Å—å', 'success');
  updateDisplay();
}

// –£–Ω–∏–≤–µ—Ä
function goToUniversity() {
  if (gameState.energy < 15) {
    showNotification('–°–ª–∏—à–∫–æ–º —É—Å—Ç–∞–ª –¥–ª—è —É—á—ë–±—ã', 'error');
    return;
  }
  
  gameState.energy -= 15;
  gameState.xp += 5;
  gameState.money -= 100; // –ø–ª–∞—Ç–∞ –∑–∞ –ø—Ä–æ–µ–∑–¥ –∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
  
  showNotification('–ü–æ—Å–µ—Ç–∏–ª –ª–µ–∫—Ü–∏–∏. –ü–æ–ª—É—á–∏–ª –Ω–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è!', 'success');
  updateDisplay();
}

// –ë–æ–ª—å–Ω–∏—Ü–∞
function goToHospital() {
  if (gameState.money < 500) {
    showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –Ω–∞ –≤—Ä–∞—á–∞', 'error');
    return;
  }
  
  gameState.money -= 500;
  gameState.health = Math.min(100, gameState.health + 20);
  
  showNotification('–ü—Ä–æ—à—ë–ª –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ. –ó–¥–æ—Ä–æ–≤—å–µ —É–ª—É—á—à–∏–ª–æ—Å—å!', 'success');
  updateDisplay();
}

// –ü–æ–∫—É–ø–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
function buyItem(itemId) {
  const item = storeItems[itemId];
  if (!item) return;
  
  if (gameState.money < item.price) {
    showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥!', 'error');
    return;
  }
  
  if (gameState.ownedItems.includes(itemId)) {
    showNotification('–£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å —ç—Ç–æ!', 'error');
    return;
  }
  
  gameState.money -= item.price;
  gameState.ownedItems.push(itemId);
  
  // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –ø—Ä–µ–¥–º–µ—Ç–∞
  Object.keys(item.effects).forEach(effect => {
    if (effect === 'money') {
      // –ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥
      setInterval(() => {
        gameState.money += item.effects.money;
      }, 60000); // –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    } else {
      gameState[effect] = Math.max(0, Math.min(100, gameState[effect] + item.effects[effect]));
    }
  });
  
  showNotification(`–ö—É–ø–∏–ª ${item.name}!`, 'success');
  updateDisplay();
}

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
function switchTab(tabName) {
  // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –≤–∫–ª–∞–¥–∫–∏
  document.querySelectorAll('.tab-content').forEach(tab => {
    tab.classList.remove('active');
  });
  
  // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å –∫–Ω–æ–ø–æ–∫
  document.querySelectorAll('.tab-btn').forEach(btn => {
    btn.classList.remove('active');
  });
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—É—é –≤–∫–ª–∞–¥–∫—É
  const tab = document.getElementById(tabName + '-tab');
  if (tab) {
    tab.classList.add('active');
  }
  
  // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É
  event.target.classList.add('active');
  
  gameState.activeTab = tabName;
}

// –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
function showNotification(message, type = 'info') {
  const notification = document.getElementById('notification');
  notification.textContent = message;
  notification.className = `notification show ${type}`;
  
  setTimeout(() => {
    notification.classList.remove('show');
  }, 3000);
}

// –°–ª—É—á–∞–π–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
function triggerRandomEvent() {
  const events = [
    {
      emoji: 'üí∏',
      title: '–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã',
      description: '–°–ª–æ–º–∞–ª—Å—è —Ç–µ–ª–µ—Ñ–æ–Ω, –ø—Ä–∏—à–ª–æ—Å—å –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å—Å—è –Ω–∞ —Ä–µ–º–æ–Ω—Ç',
      effects: { money: -500 }
    },
    {
      emoji: 'üéâ',
      title: '–£–¥–∞—á–Ω—ã–π –¥–µ–Ω—å!',
      description: '–ù–∞—à—ë–ª –¥–µ–Ω—å–≥–∏ –≤ —Å—Ç–∞—Ä–æ–π –∫—É—Ä—Ç–∫–µ',
      effects: { money: 200, energy: 5 }
    },
    {
      emoji: 'üò∑',
      title: '–ü–ª–æ—Ö–æ–µ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ',
      description: '–ß—Ç–æ-—Ç–æ –ø–æ–¥—Ö–≤–∞—Ç–∏–ª... –ù—É–∂–Ω–æ –±–µ—Ä–µ—á—å –∑–¥–æ—Ä–æ–≤—å–µ',
      effects: { health: -10, energy: -5 }
    }
  ];
  
  const event = events[Math.floor(Math.random() * events.length)];
  showEventModal(event);
  
  Object.keys(event.effects).forEach(effect => {
    gameState[effect] = Math.max(0, gameState[effect] + event.effects[effect]);
  });
}

// –ü–æ–∫–∞–∑–∞—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–±—ã—Ç–∏—è
function showEventModal(event) {
  document.getElementById('event-emoji').textContent = event.emoji;
  document.getElementById('event-title').textContent = event.title;
  document.getElementById('event-description').textContent = event.description;
  document.getElementById('event-modal').classList.add('show');
}

// –ó–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–±—ã—Ç–∏—è
function closeEventModal() {
  document.getElementById('event-modal').classList.remove('show');
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
function checkCriticalStates() {
  if (gameState.health <= 0) {
    alert('–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –ó–¥–æ—Ä–æ–≤—å–µ –Ω–∞ –Ω—É–ª–µ.');
    location.reload();
  }
  
  if (gameState.money < -5000) {
    alert('–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –î–æ–ª–≥–∏ –ø–æ–≥–ª–æ—Ç–∏–ª–∏ —Ç–µ–±—è.');
    location.reload();
  }
}